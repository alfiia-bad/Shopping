from flask import Flask, request, jsonify, send_from_directory
import requests
import os
import logging
from flask_cors import CORS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)

app = Flask(
    __name__,
    static_folder="../frontend/build",  # –ü—É—Ç—å –∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–º—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    static_url_path=""  # –°—Ç–∞—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Å –∫–æ—Ä–Ω—è —Å–∞–π—Ç–∞
)

# –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
CORS(app, resources={r"/send-to-telegram": {"origins": "*"}})  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS —Ç–æ–ª—å–∫–æ –¥–ª—è API

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')


@app.route('/send-to-telegram', methods=['POST'])
def send_to_telegram():
    logging.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /send-to-telegram")
    data = request.json
    print(f"üì¶ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")
    print(f"üîê TOKEN –∑–∞–¥–∞–Ω: {'–î–∞' if TOKEN else '–ù–µ—Ç'}, CHAT_ID: {CHAT_ID}")

    if not data:
        logging.error("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
        return jsonify({"success": False, "message": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"}), 400

    cart = data.get('cart', '')
    if not cart:
        logging.error("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return jsonify({"success": False, "message": "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"}), 400

    message = f"–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n{cart}"
    logging.debug(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {message}")

    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"

    try:
        response = requests.post(url, data={'chat_id': CHAT_ID, 'text': message})
        print(f"üì° Telegram –æ—Ç–≤–µ—Ç: {response.status_code}, {response.text}")

        if response.status_code == 200:
            logging.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return jsonify({"success": True, "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"})
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            return jsonify({"success": False, "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è"}), 500
    except requests.exceptions.RequestException as e:
        logging.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify({"success": False, "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å Telegram"}), 500


# –û—Ç–¥–∞—á–∞ React-—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve_react(path):
    full_path = os.path.join(app.static_folder, path)
    if path != "" and os.path.exists(full_path):
        return send_from_directory(app.static_folder, path)
    else:
        return send_from_directory(app.static_folder, 'index.html')


if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(debug=True, host="0.0.0.0", port=port)
